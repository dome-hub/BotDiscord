require('dotenv').config();
const { Client, GatewayIntentBits } = require('discord.js');
const { joinVoiceChannel, createAudioPlayer, createAudioResource, StreamType, getVoiceConnection } = require('@discordjs/voice');
const youtubedl = require('youtube-dl-exec'); // ใช้ youtube-dl-exec แทน ytdl-core
const { generateDependencyReport } = require('@discordjs/voice');
console.log(generateDependencyReport());

const libsodium = require('libsodium-wrappers');
(async() => {
    await libsodium.ready;
    console.log("libsodium-wrappers loaded successfully");
})();

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildVoiceStates,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent
    ],
});

const prefix = '!';

let queue = [];  // สร้างตัวแปรสำหรับเก็บคิวเพลง
let isPlaying = false;  // ใช้สำหรับตรวจสอบสถานะการเล่นเพลง
let connection = null; // ใช้เก็บการเชื่อมต่อช่องเสียง
let player = createAudioPlayer(); // สร้าง player ทันที

client.on('ready', () => {
    console.log(`Logged in as ${client.user.tag}!`);
});

client.on('messageCreate', async message => {
    if (!message.content.startsWith(prefix) || message.author.bot) return;

    const args = message.content.slice(prefix.length).trim().split(/ +/);
    const command = args.shift().toLowerCase();

    if (command === 'play') {
        if (!args.length) return message.reply('กรุณาให้ลิงก์ YouTube นะไอโง่เสี่ยว');

        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) return message.reply('กรุณาเข้าไปในช่องเสียงก่อน!');

        try {
            // ถ้ายังไม่มีการเชื่อมต่อ ให้สร้างการเชื่อมต่อกับช่องเสียง
            if (!connection) {
                connection = joinVoiceChannel({
                    channelId: voiceChannel.id,
                    guildId: voiceChannel.guild.id,
                    adapterCreator: voiceChannel.guild.voiceAdapterCreator,
                });
                connection.subscribe(player);
            }

            // ตรวจสอบว่าเป็น Playlist หรือวิดีโอเดี่ยว
            if (args[0].includes('playlist')) {
                const playlistId = args[0].split('list=')[1];  // ดึง Playlist ID จากลิงก์

                // ใช้ youtube-dl-exec เพื่อดึงข้อมูล Playlist
                const playlist = await youtubedl(`https://www.youtube.com/playlist?list=${playlistId}`, {
                    flatPlaylist: true,
                    dumpSingleJson: true
                });

                // เพิ่มลิงก์ใน Playlist ลงในคิว
                playlist.entries.forEach(video => {
                    queue.push(`https://www.youtube.com/watch?v=${video.id}`);
                });
                message.reply(`เพิ่ม Playlist: ${playlist.title} ลงในคิว`);

            } else {
                // ถ้าเป็นวิดีโอเดี่ยวให้เพิ่มลงในคิว
                queue.push(args[0]);
                message.reply(`เพิ่มเพลงในคิว: ${args[0]}`);
            }

            // ถ้าไม่มีเพลงกำลังเล่นอยู่ ให้เริ่มเล่นเพลงแรกในคิว
            if (!isPlaying) {
                playNext(message);
            }

        } catch (error) {
            console.error('Error while joining voice channel:', error);
            message.reply('เกิดข้อผิดพลาดในการเชื่อมต่อกับช่องเสียง');
        }
    }

    if (command === 'stop') {
        const voiceChannel = message.member.voice.channel;
        if (!voiceChannel) return message.reply('คุณต้องอยู่ในช่องเสียงเพื่อหยุดเพลง!');

        try {
            const connection = getVoiceConnection(voiceChannel.guild.id);
            if (connection) {
                connection.destroy();
                queue = [];  // ล้างคิวเพลง
                isPlaying = false;  // รีเซ็ตสถานะการเล่น
                message.reply('หยุดเล่นเพลงและออกจากช่องเสียงแล้ว');
            } else {
                message.reply('ไม่ได้เล่นเพลงอยู่ในขณะนี้');
            }
        } catch (error) {
            console.error('Error while stopping music:', error);
            message.reply('เกิดข้อผิดพลาดในการหยุดเพลง');
        }
    }
});

// ฟังก์ชันสำหรับเล่นเพลงจากคิว
async function playNext(message) {
    if (queue.length === 0) {
        message.channel.send('คิวเพลงว่างแล้ว!');
        if (connection) {
            connection.destroy();  // ออกจากช่องเสียงเมื่อคิวว่าง
            connection = null;
        }
        isPlaying = false;
        return;
    }

    isPlaying = true;  // กำลังเล่นเพลง
    const videoUrl = queue.shift();  // ดึงเพลงแรกในคิวออกมาเล่น

    try {
        // ใช้ youtube-dl-exec เพื่อดึงสตรีมเสียง
        const stream = youtubedl.exec(videoUrl, {
            o: '-',
            q: true,
            f: 'bestaudio'
        }, { stdio: ['ignore', 'pipe', 'ignore'] }).stdout;

        const resource = createAudioResource(stream, { inputType: StreamType.Arbitrary });
        console.log('กำลังสตรีมเสียงจาก:', videoUrl);

        player.play(resource);

        // ตรวจสอบการเปลี่ยนสถานะ player เพื่อเล่นเพลงถัดไปเมื่อเพลงปัจจุบันเล่นจบ
        player.on('stateChange', (oldState, newState) => {
            if (oldState.status === 'playing' && newState.status === 'idle') {
                playNext(message); 
            }
        });

        player.on('error', error => {
            console.error('เกิดข้อผิดพลาดขณะเล่นเพลง:', error.message);
            message.channel.send('เกิดข้อผิดพลาดในการสตรีมเพลง');
            playNext(message); // เล่นเพลงถัดไปหากเกิดข้อผิดพลาด
        });

    } catch (error) {
        console.error('Error while streaming video:', error);
        message.reply('เกิดข้อผิดพลาดในการสตรีมเพลงนี้');
        isPlaying = false;  // รีเซ็ตสถานะการเล่นเมื่อเกิดข้อผิดพลาด
    }
}


client.login(process.env.BOT_TOKEN);
